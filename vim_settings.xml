<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/cadagent/modules/ps/objmod/PlmPsNetworkActivityConfirmation.java" timestamp="1521818028507">
        <mark key="'" line="163" column="30" />
      </file>
      <file name="$MAVEN_REPOSITORY$/com/dscsag/base/5.1.12.0/base-5.1.12.0.jar!/cadagent/gui/obr/ObrFunctionEventQueue.class" timestamp="1522344028513" />
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/base/java/src/cadagent/cfc/gfx/GxNumericField.java" timestamp="1522751261250" />
      <file name="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCopyStruct.java" timestamp="1522350829154">
        <mark key="'" line="353" column="38" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/ps/gui/confirmation/BrConfirmation.java" timestamp="1522757551363">
        <mark key="'" line="231" column="20" />
        <mark key="[" line="245" column="72" />
        <mark key="]" line="245" column="72" />
        <mark key="." line="245" column="72" />
        <mark key="^" line="245" column="72" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/omf/OmfCreateUrl.java" timestamp="1521718403744">
        <mark key="'" line="72" column="20" />
      </file>
      <file name="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.12.0/sapbase-5.1.12.0-sources.jar!/cadagent/proc/fld/ProcessFolderRename.java" timestamp="1522350153248" />
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/proc/PLMProcess.java" timestamp="1522334768411" />
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/base/java/src/cadagent/cfc/gfx/GxMeasureUnitField.java" timestamp="1522241503475">
        <mark key="[" line="89" column="0" />
        <mark key="]" line="89" column="0" />
        <mark key="." line="89" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/omf/OmfFldCreateShared.java" timestamp="1522350520669">
        <mark key="'" line="262" column="6" />
      </file>
      <file name="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/default.txt" timestamp="1522340495868">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="2535" column="0" />
        <mark key="]" line="2535" column="0" />
        <mark key="." line="2535" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/sandvik/src/main/java/sandvik/dadi/DadiImportCreateDocumentBefore.java" timestamp="1521566268114">
        <mark key="'" line="80" column="53" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/sess/PlmSessionManager.java" timestamp="1521742882807">
        <mark key="'" line="233" column="40" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/utils/CustomerDataHelper.java" timestamp="1521650716913">
        <mark key="'" line="90" column="6" />
      </file>
      <file name="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" timestamp="1521647053528">
        <mark key="'" line="925" column="10" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/proc/sap/updateobjectsread/ProcessUpdateObjectsRead.java" timestamp="1522333572134" />
      <file name="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.12.0/sapbase-5.1.12.0-sources.jar!/cadagent/proc/PLMProcess.java" timestamp="1522341963935" />
      <file name="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.9.2/plm-5.1.9.2-sources.jar!/plm/gui/ExportChildrenDisplay.java" timestamp="1521561083633">
        <mark key="'" line="311" column="60" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/proc/mat/PlmProcessMaterialBomChange.java" timestamp="1522334354427" />
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/omf/OmfFldCreate.java" timestamp="1522348828637" />
      <file name="C:/Program Files/Java/jdk1.8.0_131/src.zip!/java/text/DecimalFormat.java" timestamp="1522320641481" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/sandvik/src/main/java/sandvik/proc/api/SandvikUtils.java" timestamp="1521552389495">
        <mark key="'" line="8" column="1" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmObject.java" timestamp="1521711120460">
        <mark key="'" line="989" column="4" />
      </file>
      <file name="C:/Program Files/Java/jdk1.8.0_131/src.zip!/java/text/DecimalFormatSymbols.java" timestamp="1522234779784">
        <mark key="'" line="218" column="6" />
      </file>
      <file name="C:/ENTWICKLUNG/ectr_installations/ECTR-51/basis/config/system-default.txt" timestamp="1522340123329">
        <mark key="'" line="643" column="46" />
      </file>
      <file name="/__dummy.xml" timestamp="1522350278715">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/omf/OmfFldPartPoolCreate.java" timestamp="1522350527353">
        <mark key="'" line="417" column="29" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/bhs/trunk/src/main/java/bhs/proc/BhsProcessCloneFolderInheritTraits.java" timestamp="1522350773392" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/bhs/trunk/src/main/java/bhs/omf/OmfBhsInheritFolderTraits.java" timestamp="1522341563046" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/sandvik/src/main/java/sandvik/proc/sync/SandvikProcessF4SyncDataHelp.java" timestamp="1521559885726">
        <mark key="'" line="180" column="34" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/cadagent/modules/ps/proc/ProcessPsNetworkConfirmationAdd.java" timestamp="1522324176660" />
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/test/src/plm/sess/ECTRStartupTimeStatisticsTest.java" timestamp="1522229033923">
        <mark key="'" line="71" column="56" />
        <mark key="[" line="74" column="0" />
        <mark key="]" line="74" column="0" />
        <mark key="." line="74" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/.gitignore" timestamp="1521743374947">
        <mark key="[" line="29" column="0" />
        <mark key="]" line="29" column="0" />
        <mark key="." line="29" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/cadagent/modules/ps/objmod/PsNetActConfirmationAdd.java" timestamp="1521818067032">
        <mark key="'" line="59" column="30" />
      </file>
      <file name="/Dummy.txt" timestamp="1522756179898">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="30" />
        <mark key="." line="0" column="30" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/omf/OmfMatBomChange.java" timestamp="1522334004029" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/sandvik/src/main/java/sandvik/brobj/BrSandvikImportObjectNew.java" timestamp="1521711009044">
        <mark key="'" line="175" column="2" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/sandvik/src/main/java/sandvik/dadi/create/SandvikProcessDocumentCreateGui.java" timestamp="1521559226694">
        <mark key="'" line="473" column="47" />
      </file>
      <file name="$MAVEN_REPOSITORY$/com/dscsag/cust/sandvik-ectr-hotfix-5.1.9.2/5.1.9.2-SNAPSHOT/sandvik-ectr-hotfix-5.1.9.2-5.1.9.2-SNAPSHOT-sources.jar!/plm/modules/dataexchange/proc/PlmProcessDataExcImport.java" timestamp="1521566417780">
        <mark key="'" line="525" column="3" />
      </file>
      <file name="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/proc/PlmMultiDetailProcessFast.java" timestamp="1521648199576">
        <mark key="'" line="177" column="29" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/sandvik/src/main/java/sandvik/dadi/DadiImportCreateAfter.java" timestamp="1521561510940">
        <mark key="'" line="108" column="2" />
      </file>
      <file name="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.9.2/plm-5.1.9.2-sources.jar!/plm/sess/PlmSessionManager.java" timestamp="1521477743364">
        <mark key="'" line="1734" column="0" />
      </file>
      <file name="$MAVEN_REPOSITORY$/com/dscsag/cust/sandvik-ectr-hotfix-5.1.9.2/5.1.9.2-SNAPSHOT/sandvik-ectr-hotfix-5.1.9.2-5.1.9.2-SNAPSHOT-sources.jar!/plm/modules/dataexchange/omf/OmfDataExcImport.java" timestamp="1521560817547">
        <mark key="'" line="2021" column="40" />
      </file>
      <file name="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/menu.guidef" timestamp="1522341541901">
        <mark key="'" line="1562" column="63" />
        <mark key="[" line="1579" column="0" />
        <mark key="]" line="1579" column="0" />
        <mark key="." line="1579" column="0" />
      </file>
      <file name="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" timestamp="1522349105007">
        <mark key="'" line="626" column="38" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/base/test/src/cadagent/gui/obr/ObrPropertyUtilsTest.java" timestamp="1522751595310">
        <mark key="[" line="73" column="49" />
        <mark key="]" line="73" column="49" />
        <mark key="." line="73" column="49" />
        <mark key="^" line="72" column="53" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/base/java/src/cadagent/gui/obr/ObrPropertyUtils.java" timestamp="1522757606926">
        <mark key="[" line="761" column="10" />
        <mark key="]" line="761" column="10" />
        <mark key="^" line="761" column="30" />
        <mark key="." line="761" column="10" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/proc/mat/ProcessMatBomChange.java" timestamp="1522334812263" />
      <file name="/fragment.java" timestamp="1522755995989">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="17" />
        <mark key="." line="0" column="17" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/statuploader-base/src/main/java/com/dscsag/monitoring/statuploader_base/MidwayWebsocketHandler.java" timestamp="1521743047722">
        <mark key="'" line="104" column="25" />
      </file>
    </filemarks>
    <jumps>
      <jump line="80" column="53" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/sandvik/src/main/java/sandvik/dadi/DadiImportCreateDocumentBefore.java" />
      <jump line="414" column="0" filename="$MAVEN_REPOSITORY$/com/dscsag/cust/sandvik-ectr-hotfix-5.1.9.2/5.1.9.2-SNAPSHOT/sandvik-ectr-hotfix-5.1.9.2-5.1.9.2-SNAPSHOT-sources.jar!/plm/modules/dataexchange/proc/PlmProcessDataExcImport.java" />
      <jump line="525" column="3" filename="$MAVEN_REPOSITORY$/com/dscsag/cust/sandvik-ectr-hotfix-5.1.9.2/5.1.9.2-SNAPSHOT/sandvik-ectr-hotfix-5.1.9.2-5.1.9.2-SNAPSHOT-sources.jar!/plm/modules/dataexchange/proc/PlmProcessDataExcImport.java" />
      <jump line="955" column="8" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="956" column="6" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="961" column="4" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="969" column="8" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="970" column="6" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="972" column="4" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="82" column="55" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="80" column="30" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="872" column="37" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="880" column="4" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="890" column="8" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="891" column="17" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="903" column="8" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="904" column="12" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="922" column="14" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="104" column="6" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/sandvik/src/main/java/sandvik/brobj/BrSandvikImportObjectNew.java" />
      <jump line="106" column="40" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/sandvik/src/main/java/sandvik/brobj/BrSandvikImportObjectNew.java" />
      <jump line="99" column="40" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/sandvik/src/main/java/sandvik/brobj/BrSandvikImportObjectNew.java" />
      <jump line="923" column="12" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="925" column="10" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/objmod/PlmObject.java" />
      <jump line="175" column="2" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/sandvik/src/main/java/sandvik/brobj/BrSandvikImportObjectNew.java" />
      <jump line="177" column="29" filename="$MAVEN_REPOSITORY$/com/dscsag/sapbase/5.1.9.2/sapbase-5.1.9.2-sources.jar!/cadagent/proc/PlmMultiDetailProcessFast.java" />
      <jump line="90" column="6" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/utils/CustomerDataHelper.java" />
      <jump line="903" column="8" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmObject.java" />
      <jump line="904" column="12" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmObject.java" />
      <jump line="922" column="14" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmObject.java" />
      <jump line="923" column="12" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmObject.java" />
      <jump line="925" column="10" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmObject.java" />
      <jump line="955" column="8" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmObject.java" />
      <jump line="956" column="6" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmObject.java" />
      <jump line="961" column="4" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmObject.java" />
      <jump line="969" column="8" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmObject.java" />
      <jump line="970" column="6" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmObject.java" />
      <jump line="972" column="4" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmObject.java" />
      <jump line="72" column="20" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/omf/OmfCreateUrl.java" />
      <jump line="233" column="40" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/sess/PlmSessionManager.java" />
      <jump line="119" column="26" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/statuploader-base/src/main/java/com/dscsag/monitoring/statuploader_base/MidwayWebsocketHandler.java" />
      <jump line="104" column="25" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/statuploader-base/src/main/java/com/dscsag/monitoring/statuploader_base/MidwayWebsocketHandler.java" />
      <jump line="66" column="58" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/sess/ECTRStartupTimeStatistics.java" />
      <jump line="545" column="33" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/cadagent/modules/ps/objmod/PlmPsNetworkActivityConfirmation.java" />
      <jump line="68" column="2" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/cadagent/modules/ps/objmod/PlmPsNetworkActivityConfirmation.java" />
      <jump line="163" column="30" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/cadagent/modules/ps/objmod/PlmPsNetworkActivityConfirmation.java" />
      <jump line="184" column="13" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/cadagent/modules/ps/objmod/PsNetActConfirmationAdd.java" />
      <jump line="59" column="30" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/cadagent/modules/ps/objmod/PsNetActConfirmationAdd.java" />
      <jump line="143" column="14" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/ps/gui/confirmation/BrConfirmation.java" />
      <jump line="549" column="41" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/ps/gui/confirmation/BrConfirmation.java" />
      <jump line="235" column="38" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/ps/gui/confirmation/BrConfirmation.java" />
      <jump line="73" column="46" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/sess/ECTRStartupTimeStatistics.java" />
      <jump line="84" column="38" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/sess/ECTRStartupTimeStatistics.java" />
      <jump line="85" column="38" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/sess/ECTRStartupTimeStatistics.java" />
      <jump line="109" column="6" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/sess/ECTRStartupTimeStatistics.java" />
      <jump line="104" column="47" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/base/java/src/cadagent/gui/obr/ObrPropertyUtils.java" />
      <jump line="679" column="17" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/base/java/src/cadagent/gui/obr/ObrPropertyUtils.java" />
      <jump line="683" column="17" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/base/java/src/cadagent/gui/obr/ObrPropertyUtils.java" />
      <jump line="86" column="4" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/sess/ECTRStartupTimeStatistics.java" />
      <jump line="73" column="56" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/test/src/plm/sess/ECTRStartupTimeStatisticsTest.java" />
      <jump line="218" column="6" filename="C:/Program Files/Java/jdk1.8.0_131/src.zip!/java/text/DecimalFormatSymbols.java" />
      <jump line="130" column="21" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/ps/omf/OmfPsConfirmation.java" />
      <jump line="127" column="13" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/ps/gui/confirmation/PsActivityConfirmationDialog.java" />
      <jump line="123" column="20" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/ps/gui/confirmation/PsActivityConfirmationDialog.java" />
      <jump line="148" column="3" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/ps/gui/confirmation/PsActivityConfirmationDialog.java" />
      <jump line="192" column="27" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/ps/gui/confirmation/PsActivityConfirmationDialog.java" />
      <jump line="120" column="25" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/ps/gui/confirmation/PsActivityConfirmationDialog.java" />
      <jump line="117" column="33" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/base/java/src/cadagent/cfc/gfx/GxNumericField.java" />
      <jump line="128" column="12" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/ps/gui/confirmation/PsActivityConfirmationDialog.java" />
      <jump line="594" column="28" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/base/java/src/cadagent/gui/obr/ObrPropertyUtils.java" />
      <jump line="2325" column="0" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/default.txt" />
      <jump line="5121" column="3" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/default.txt" />
      <jump line="2086" column="68" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/default.txt" />
      <jump line="2" column="0" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/default.txt" />
      <jump line="94" column="14" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/menu.guidef" />
      <jump line="0" column="0" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/menu.guidef" />
      <jump line="2" column="0" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/menu.guidef" />
      <jump line="643" column="46" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/basis/config/system-default.txt" />
      <jump line="2514" column="39" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/default.txt" />
      <jump line="5073" column="0" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/default.txt" />
      <jump line="2517" column="0" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/default.txt" />
      <jump line="0" column="0" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/default.txt" />
      <jump line="1562" column="63" filename="C:/ENTWICKLUNG/ectr_installations/ECTR-51/customize/config/menu.guidef" />
      <jump line="164" column="8" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="165" column="0" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="166" column="12" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="167" column="10" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="223" column="8" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="228" column="68" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="602" column="26" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="604" column="26" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="611" column="14" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="615" column="37" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="618" column="38" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="620" column="15" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="626" column="38" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCreate.java" />
      <jump line="478" column="57" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCopyStruct.java" />
      <jump line="262" column="6" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/omf/OmfFldCreateShared.java" />
      <jump line="417" column="29" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/omf/OmfFldPartPoolCreate.java" />
      <jump line="353" column="38" filename="$MAVEN_REPOSITORY$/com/dscsag/plm/5.1.12.0/plm-5.1.12.0-sources.jar!/plm/omf/OmfFldCopyStruct.java" />
      <jump line="234" column="20" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/ps/gui/confirmation/BrConfirmation.java" />
    </jumps>
    <registers>
      <register name="&quot;" type="4">
        <text encoding="base64">IA==</text>
      </register>
      <register name="-" type="4">
        <text encoding="base64">IA==</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxuYW1pbmdNZXRob2RcPg==</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgIE9iclByb3BlcnR5VXRpbHMuaW5pdGlhbGl6ZUF0dHJpYnV0ZVByb3BlcnR5KHBycCwgSW50ZWdlci5NQVhfVkFMVUUpOwo=</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgIAo=</text>
      </register>
      <register name="q" type="4">
        <text />
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgIE9iclByb3BlcnR5VXRpbHMuaW5pdGlhbGl6ZU51bWJlcldpdGhvdXRDb21tYVByb3BlcnR5KHBycCk7Cg==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgICgoTnVtZXJpY0Zvcm1hdCkgbnVtZXJpY0Zvcm1hdHRlcikuc2V0R3JvdXBpbmdVc2VkKGZhbHNlKTsK</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgIAo=</text>
      </register>
      <register name="6" type="4">
        <text>Format formatter = prp.getFormatter();
    if (formatter instanceof ObrPropertyUtils.Nu)
    {
      ((ObrPropertyUtils.) formatter).
    }</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgIHBycC5nZXRGb3JtYXR0ZXIoKS4K</text>
      </register>
      <register name="w" type="4">
        <text />
      </register>
      <register name="8" type="2">
        <text encoding="base64">Pj4+Pj4+PiBmaXggYnVnIQo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64"></text>
      </register>
      <register name=":" type="4">
        <text>758</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxuYW1pbmdNZXRob2RcPg==</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxuYW1pbmdNZXRob2RcPg==</last-pattern>
      <last-replace>~</last-replace>
      <last-substitute>]</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxzY3JpcHRTdGFydFRpbWVcPg==</entry>
        <entry encoding="base64">XDxPVVRfU0VMRUNUSU9OXD4=</entry>
        <entry encoding="base64">XDxidG5BblN0cnVjdFw+</entry>
        <entry encoding="base64">XDxpbXBPYmpNYXBcPg==</entry>
        <entry>getcustomer</entry>
        <entry>mCustomerData</entry>
        <entry encoding="base64">XDxjdXN0b21lckRhdGFIZWxwZXJcPg==</entry>
        <entry encoding="base64">XDxtQ3VzdG9tZXJEYXRhXD4=</entry>
        <entry encoding="base64">XDxQRVJTX05PXD4=</entry>
        <entry encoding="base64">XDxQRVJTT05BTF9OT1w+</entry>
        <entry encoding="base64">XDxTQ1JJUFRfVElNRVw+</entry>
        <entry encoding="base64">XDxQUkVfTE9HT05fVElNRVw+</entry>
        <entry encoding="base64">XDxQT1NUX0xPR09OX1RJTUVcPg==</entry>
        <entry encoding="base64">XDxtTnVtZXJpY0Zvcm1hdHRlclw+</entry>
        <entry encoding="base64">Pj4+</entry>
        <entry encoding="base64">PDw=</entry>
        <entry encoding="base64">PDw8PDw=</entry>
        <entry encoding="base64">Pj4+Pg==</entry>
        <entry>===</entry>
        <entry encoding="base64">XDxuYW1pbmdNZXRob2RcPg==</entry>
      </history-search>
      <history-cmd>
        <entry>50</entry>
        <entry>369</entry>
        <entry>169</entry>
        <entry>100</entry>
        <entry>528</entry>
        <entry>547</entry>
        <entry>222</entry>
        <entry>278</entry>
        <entry>395</entry>
        <entry>210</entry>
        <entry>208</entry>
        <entry>240</entry>
        <entry>202</entry>
        <entry>1774</entry>
        <entry>159</entry>
        <entry>266</entry>
        <entry>332</entry>
        <entry>1378</entry>
        <entry>75</entry>
        <entry>758</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>