<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="/a.dummy" timestamp="1512423956901">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/ObjectVector.java" timestamp="1512565773574" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/bhs/trunk/src/main/java/bhs/brobj/BrtemplateSelectionObrObject.java" timestamp="1510838952754">
        <mark key="[" line="12" column="18" />
        <mark key="]" line="12" column="18" />
        <mark key="^" line="12" column="17" />
        <mark key="." line="12" column="18" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/proc/doc/ProcessDocBomMaintain.java" timestamp="1512415487347" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/classification.java" timestamp="1512035849941">
        <mark key="[" line="2" column="13" />
        <mark key="]" line="2" column="12" />
        <mark key="." line="2" column="12" />
        <mark key="^" line="2" column="12" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/proc/doc/PlmProcessSingleCheckinCdeskServices.java" timestamp="1512564647200" />
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/proc/PLMProcess.java" timestamp="1512504897371" />
      <file name="$USER_HOME$/workspace/sandbox/jaxb-v2/jaxb-ri/pom.xml" timestamp="1511795574035">
        <mark key="[" line="272" column="66" />
        <mark key="]" line="272" column="65" />
        <mark key="." line="272" column="65" />
        <mark key="^" line="272" column="65" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/plmobj/RenkCustomDocument.java" timestamp="1511959615820">
        <mark key="[" line="14" column="33" />
        <mark key="]" line="14" column="13" />
        <mark key="." line="14" column="13" />
        <mark key="^" line="14" column="13" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmClassAllocation.java" timestamp="1512555877024" />
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/cadagent/modules/variantconfiguration/proc/PlmProcessCreateVariantAssembly.java" timestamp="1512505368676">
        <mark key="'" line="172" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/sess/PlmSessionManager.java" timestamp="1512481065955" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/ClassificationMappingProcess.java" timestamp="1512493344833">
        <mark key="[" line="24" column="0" />
        <mark key="]" line="24" column="0" />
        <mark key="^" line="25" column="53" />
        <mark key="." line="24" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" timestamp="1512564719904">
        <mark key="'" line="192" column="0" />
        <mark key="[" line="130" column="10" />
        <mark key="]" line="130" column="10" />
        <mark key="^" line="166" column="7" />
        <mark key="." line="130" column="10" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/CreateComponentProcess.java" timestamp="1511983170794">
        <mark key="[" line="39" column="29" />
        <mark key="]" line="39" column="48" />
        <mark key="^" line="39" column="48" />
        <mark key="." line="39" column="48" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/StartImportProcess.java" timestamp="1511981435386">
        <mark key="[" line="33" column="13" />
        <mark key="]" line="33" column="13" />
        <mark key="^" line="33" column="25" />
        <mark key="." line="33" column="13" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/monitoring-base/dashboard/dashboard-frontend/src/app/administration/statistic-settings/statistic-settings.component.ts" timestamp="1511180979370">
        <mark key="[" line="141" column="63" />
        <mark key="]" line="141" column="63" />
        <mark key="^" line="141" column="63" />
        <mark key="." line="141" column="63" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch.java" timestamp="1512253744496">
        <mark key="[" line="4" column="0" />
        <mark key="]" line="38" column="34" />
        <mark key="." line="4" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/mappingClassification.java" timestamp="1512039552442">
        <mark key="[" line="9" column="13" />
        <mark key="]" line="9" column="13" />
        <mark key="." line="9" column="13" />
        <mark key="^" line="9" column="31" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/bhs/trunk/src/main/java/bhs/omf/OmfBhsInheritFolderTraits.java" timestamp="1512505617423" />
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/proc/office/PlmProcessTransferDataToDocuments.java" timestamp="1512470462256" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/CreateMaterialProcess.java" timestamp="1511981119765">
        <mark key="[" line="33" column="13" />
        <mark key="]" line="33" column="13" />
        <mark key="." line="33" column="13" />
        <mark key="^" line="137" column="26" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/gui/GuiUtils.java" timestamp="1512506101345" />
      <file name="/DummyFile.xpath" timestamp="1511811755798">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/pom2.xml" timestamp="1511357573617">
        <mark key="[" line="19" column="0" />
        <mark key="]" line="19" column="0" />
        <mark key="^" line="12" column="1" />
        <mark key="." line="19" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/schemas/plmxmlschema/InertiaType.java" timestamp="1511814931179">
        <mark key="[" line="18" column="39" />
        <mark key="]" line="18" column="39" />
        <mark key="." line="18" column="39" />
        <mark key="^" line="18" column="39" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsingException.java" timestamp="1511813325837">
        <mark key="[" line="17" column="13" />
        <mark key="]" line="17" column="12" />
        <mark key="." line="17" column="12" />
        <mark key="^" line="17" column="12" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/plmobj/RenkCustomMaterial.java" timestamp="1512492980953" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/teamcenter-classification-mapper/src/main/java/com/dscsag/projects/renk/teamcenter_classification_mapper/App.java" timestamp="1511810458253">
        <mark key="[" line="30" column="118" />
        <mark key="]" line="31" column="24" />
        <mark key="^" line="31" column="24" />
        <mark key="." line="31" column="24" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/plm/modules/insplan/omf/IRUtils.java" timestamp="1512482209830" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/resources/META-INF/services/cadagent.gui.obr.ObrFunctionManagerInterface" timestamp="1511555679798">
        <mark key="[" line="0" column="32" />
        <mark key="]" line="0" column="41" />
        <mark key="." line="0" column="41" />
        <mark key="^" line="0" column="41" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/Beispielwerkzeuge Augsburg/98000147_B_1-Drehwerkzeug.xml" timestamp="1511901966665">
        <mark key="[" line="211" column="104" />
        <mark key="]" line="211" column="103" />
        <mark key="^" line="211" column="103" />
        <mark key="." line="211" column="103" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/Component.java" timestamp="1512565415541">
        <mark key="[" line="125" column="0" />
        <mark key="]" line="125" column="0" />
        <mark key="." line="125" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/bhs/trunk/src/main/java/bhs/brobj/WaWa.java" timestamp="1510838264631">
        <mark key="[" line="12" column="13" />
        <mark key="]" line="12" column="13" />
        <mark key="." line="12" column="13" />
        <mark key="^" line="107" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/teamcenter-classification-mapper/pom.xml" timestamp="1512559303961" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/DictionaryAttributeMappingProcess.java" timestamp="1511816341292">
        <mark key="[" line="217" column="33" />
        <mark key="]" line="217" column="38" />
        <mark key="^" line="217" column="38" />
        <mark key="." line="217" column="38" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/OmfFatcDataImport.java" timestamp="1512554473715">
        <mark key="[" line="48" column="33" />
        <mark key="]" line="48" column="33" />
        <mark key="." line="48" column="33" />
        <mark key="^" line="48" column="33" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/utils/JAXBUtils.java" timestamp="1512425213892">
        <mark key="[" line="257" column="40" />
        <mark key="]" line="257" column="40" />
        <mark key="." line="257" column="40" />
        <mark key="^" line="257" column="40" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/proc/mat/PlmProcessMaterialCreateMulti.java" timestamp="1512503800004">
        <mark key="'" line="986" column="11" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/plmobj/myMaterial.java" timestamp="1511947676541">
        <mark key="[" line="5" column="1" />
        <mark key="]" line="6" column="1" />
        <mark key="^" line="6" column="1" />
        <mark key="." line="6" column="1" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/proc/cad/PlmProcessCadDocumentSaveAs.java" timestamp="1512504512058" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/utils/StringUtils.java" timestamp="1511886109237">
        <mark key="[" line="14" column="44" />
        <mark key="]" line="14" column="43" />
        <mark key="." line="14" column="43" />
        <mark key="^" line="14" column="43" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" timestamp="1512565661638">
        <mark key="'" line="4340" column="8" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="2460" column="59" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/brobj/BrFolder.java" timestamp="1512506021863" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/OmfFatCDataImport.java" timestamp="1511517323248">
        <mark key="[" line="6" column="30" />
        <mark key="]" line="6" column="20" />
        <mark key="^" line="13" column="3" />
        <mark key="." line="6" column="20" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/proc/mat/PlmProcessMaterialCreate.java" timestamp="1512503830903">
        <mark key="'" line="201" column="2" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/App.java" timestamp="1511556249340">
        <mark key="[" line="45" column="15" />
        <mark key="]" line="45" column="21" />
        <mark key="^" line="45" column="21" />
        <mark key="." line="45" column="21" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/bhs/trunk/src/main/java/bhs/brobj/CharacteristicObject.java" timestamp="1510838334545">
        <mark key="[" line="12" column="13" />
        <mark key="]" line="23" column="32" />
        <mark key="^" line="23" column="32" />
        <mark key="." line="23" column="32" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" timestamp="1512560803897">
        <mark key="'" line="145" column="62" />
        <mark key="[" line="245" column="7" />
        <mark key="]" line="245" column="7" />
        <mark key="." line="245" column="7" />
        <mark key="^" line="245" column="9" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/bhs/trunk/src/main/java/bhs/brobj/BrBhsTemplateFld.java" timestamp="1511265137000">
        <mark key="[" line="19" column="29" />
        <mark key="]" line="20" column="61" />
        <mark key="." line="20" column="61" />
        <mark key="^" line="20" column="61" />
      </file>
      <file name="/Dummy.txt" timestamp="1512559257593">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/proc/doc/PopDocCreate.java" timestamp="1512504378790">
        <mark key="'" line="86" column="13" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/KomplettWerkzeug.java" timestamp="1512255662298">
        <mark key="[" line="23" column="3" />
        <mark key="]" line="24" column="16" />
        <mark key="." line="24" column="16" />
        <mark key="^" line="24" column="16" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/sap/conn/jco/tm/JCOTransaction.java" timestamp="1512484144746" />
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/utils/PlmDocumentUtils.java" timestamp="1512504124399" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/pom.xml" timestamp="1512559312958">
        <mark key="[" line="42" column="21" />
        <mark key="]" line="47" column="20" />
        <mark key="." line="47" column="20" />
        <mark key="^" line="47" column="20" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/serialization/SAPCharGroupDataPackageWriter.java" timestamp="1511816766999">
        <mark key="[" line="42" column="18" />
        <mark key="]" line="42" column="27" />
        <mark key="." line="42" column="27" />
        <mark key="^" line="42" column="27" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/proc/doc/create/PlmProcessDocumentCreate.java" timestamp="1512503991113" />
      <file name="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/techdoc/techdoc-main/src/main/java/techdoc/brobj/BrTechDocument.java" timestamp="1512505809365" />
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateComponentProcess.java" timestamp="1511991309153">
        <mark key="[" line="29" column="13" />
        <mark key="]" line="29" column="13" />
        <mark key="." line="29" column="13" />
        <mark key="^" line="41" column="86" />
      </file>
      <file name="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/Tool.java" timestamp="1512493040393">
        <mark key="[" line="12" column="45" />
        <mark key="]" line="12" column="65" />
        <mark key="." line="12" column="65" />
        <mark key="^" line="12" column="65" />
      </file>
      <file name="/fragment.java" timestamp="1512565191628">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="^" line="0" column="45" />
        <mark key="." line="0" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="143" column="30" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMaterialProcess.java" />
      <jump line="120" column="0" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMaterialProcess.java" />
      <jump line="154" column="32" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMaterialProcess.java" />
      <jump line="114" column="50" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMaterialProcess.java" />
      <jump line="194" column="0" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/proc/mat/PlmProcessMaterialCreateMulti.java" />
      <jump line="122" column="19" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/proc/mat/ProcessMatCreateDark.java" />
      <jump line="225" column="39" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/proc/mat/ProcessMatCreateDark.java" />
      <jump line="222" column="2" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMaterialProcess.java" />
      <jump line="94" column="2" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMaterialProcess.java" />
      <jump line="68" column="64" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMaterialProcess.java" />
      <jump line="140" column="34" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMaterialProcess.java" />
      <jump line="69" column="0" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="152" column="66" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="157" column="0" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="117" column="27" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="131" column="9" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="284" column="4" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="286" column="4" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="291" column="40" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="285" column="32" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="197" column="9" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/proc/mat/PlmProcessMaterialCreateMulti.java" />
      <jump line="83" column="2" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="16" column="25" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/Component.java" />
      <jump line="17" column="70" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/Component.java" />
      <jump line="66" column="26" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/org/plmxml/schemas/plmxmlschema/DataSetType.java" />
      <jump line="67" column="27" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/org/plmxml/schemas/plmxmlschema/DataSetType.java" />
      <jump line="127" column="67" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="20" column="35" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/Component.java" />
      <jump line="51" column="72" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/Component.java" />
      <jump line="94" column="0" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/Component.java" />
      <jump line="25" column="17" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/Component.java" />
      <jump line="265" column="20" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="112" column="4" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="75" column="3" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="60" column="44" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="64" column="44" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="67" column="82" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="88" column="15" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="138" column="93" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="137" column="10" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="272" column="39" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="99" column="46" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="68" column="0" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="78" column="6" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="111" column="11" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/Component.java" />
      <jump line="35" column="22" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/Component.java" />
      <jump line="793" column="37" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/proc/mat/PlmProcessMaterialCreate.java" />
      <jump line="235" column="5" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="96" column="0" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="89" column="6" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="122" column="0" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="138" column="0" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="120" column="55" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="126" column="36" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="136" column="62" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/CreateMatAndDocProcess.java" />
      <jump line="78" column="66" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/component/Component.java" />
      <jump line="22" column="1" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/utils/TestUtils.java" />
      <jump line="123" column="85" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/proc/doc/PopDocCreate.java" />
      <jump line="180" column="47" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/proc/doc/PopDocCreate.java" />
      <jump line="986" column="11" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/proc/mat/PlmProcessMaterialCreateMulti.java" />
      <jump line="201" column="2" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/plm++/java/src/plm/proc/mat/PlmProcessMaterialCreate.java" />
      <jump line="86" column="13" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/proc/doc/PopDocCreate.java" />
      <jump line="172" column="0" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/modules/addons/src/main/java/cadagent/modules/variantconfiguration/proc/PlmProcessCreateVariantAssembly.java" />
      <jump line="192" column="0" filename="C:/ENTWICKLUNG/java/workspaces/customer-projects/renk/ectr-teamcenter-integration/src/main/java/com/dscsag/modules/customer/omf/parsing/ParsePLMXMLProcess.java" />
      <jump line="441" column="61" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="544" column="44" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="554" column="63" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="639" column="63" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="649" column="11" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="922" column="30" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="923" column="20" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="934" column="30" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="935" column="20" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="2036" column="55" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="2417" column="44" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="2874" column="21" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="2876" column="32" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="2884" column="21" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="2886" column="32" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="3393" column="19" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="3395" column="23" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="3496" column="11" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="3497" column="34" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="3542" column="8" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="3778" column="37" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="3882" column="4" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4230" column="36" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4245" column="11" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4260" column="52" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4262" column="107" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4268" column="52" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4270" column="26" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4278" column="27" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4288" column="24" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4291" column="27" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4298" column="62" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4305" column="31" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4332" column="62" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4336" column="53" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
      <jump line="4340" column="8" filename="C:/ENTWICKLUNG/java/workspaces/ectr-platform-lab/core/sapbase/java/src/cadagent/objmod/PlmDocument.java" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="-" type="4">
        <text encoding="base64">ICAgICAgICAgIA==</text>
      </register>
      <register name="/" type="4">
        <text>setNu</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICAgIHBsbUFjY2Vzcy4K</text>
      </register>
      <register name="q" type="4">
        <text />
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgICAgICAgIG5ldyBQbG1GaWxlKCkK</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgICAgICAgIFN0cmluZyBqdCA9IFdTQXBwbFRvb2wuZ2V0Rmlyc3RXU0FwcGxGb3JFeHRlbnNpb24oImp0Iik7CiAgICAgICAgICBuZXcgUGxtRmlsZSgpCg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgICAgICAgIHBsbUZpbGUuc2V0YXAK</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ICAgICAgICAgIGRvY3VtZW50TWFzdGVyLmFkZAo=</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgIGRvY3VtZW50TWFzdGVyLnNldAo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgICAgU3RyaW5nIGRvY1R5cGUgPSBkVHlwZUNvbXBvbmVudERlcGVuZGVudC5nZXREb2NUeXBlKCk7CiAgICAgIFN0cmluZyBkb2NQYXJ0ID0gZFR5cGVDb21wb25lbnREZXBlbmRlbnQuZ2V0RG9jUGFydCgpOwogICAgICBTdHJpbmcgYXBwbFR5cGUgPSBkVHlwZUNvbXBvbmVudERlcGVuZGVudC5nZXRBcHBsVHlwZSgpOwo=</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgICAgZGVwZW5kZW50RG9jLnNldEtleShkb2NUeXBlLCBwcm9kdWN0SUQgKyBjb3VudGVyVGVzdGluZywgcmV2aXNpb24sIGRvY1BhcnQpOwo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgICAgU3RyaW5nIGRvY1R5cGUgPSBkVHlwZUNvbXBvbmVudERlcGVuZGVudC5nZXREb2NUeXBlKCk7CiAgICAgIFN0cmluZyBkb2NQYXJ0ID0gZFR5cGVDb21wb25lbnREZXBlbmRlbnQuZ2V0RG9jUGFydCgpOwogICAgICBTdHJpbmcgYXBwbFR5cGUgPSBkVHlwZUNvbXBvbmVudERlcGVuZGVudC5nZXRBcHBsVHlwZSgpOwo=</text>
      </register>
      <register name=":" type="4">
        <text>169</text>
      </register>
    </registers>
    <search>
      <last-search>setNu</last-search>
      <last-offset />
      <last-pattern>setNu</last-pattern>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDx0YWJiZWRQYW5lXD4=</entry>
        <entry encoding="base64">XDxPVVRfQ1JFQVRFRF9GT0xERVJcPg==</entry>
        <entry encoding="base64">XDxQYXJlbnRDbGFzc2lmaWNhdGlvbkVycm9yXD4=</entry>
        <entry encoding="base64">XDxmaWxlQ2hvb3Nlclw+</entry>
        <entry encoding="base64">XDxjaGFyR3JvdXBBbGxvY2F0aW9uc1w+</entry>
        <entry encoding="base64">XDxkdHlwZXNcPg==</entry>
        <entry encoding="base64">XDxyZW5rQ3VzdG9tTWF0ZXJpYWxcPg==</entry>
        <entry>bla</entry>
        <entry encoding="base64">XDxtYXRUeXBlXD4=</entry>
        <entry encoding="base64">XDx0ZW1wbGF0ZVw+</entry>
        <entry encoding="base64">XDxpbkNsYXNzXD4=</entry>
        <entry encoding="base64">XDxtZW1iZXJSZWZzXD4=</entry>
        <entry encoding="base64">XDxyZXZpc2lvblw+</entry>
        <entry>setmaterial</entry>
        <entry encoding="base64">XDxzZXRNYXRlcmlhbFw+</entry>
        <entry encoding="base64">XDxkb2N1bWVudE1hc3Rlclw+</entry>
        <entry encoding="base64">XDxPVVRfRk9MX0VSUk9SXD4=</entry>
        <entry encoding="base64">XDxmb2xkZXJQZXJtaXNzaW9uRXJyb3JcPg==</entry>
        <entry encoding="base64">XDxudW1iZXJcPg==</entry>
        <entry>setNu</entry>
      </history-search>
      <history-cmd>
        <entry>168</entry>
        <entry>253</entry>
        <entry>291</entry>
        <entry>102</entry>
        <entry>217</entry>
        <entry>10</entry>
        <entry>50</entry>
        <entry>369</entry>
        <entry>169</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>